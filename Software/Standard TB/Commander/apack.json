{
  "id": "simplicityCommander",
  "label": "Simplicity Commander",
  "description": "Simplicity Commander",
  "path": [
    ".",
    "deploy/",
    "win64/Simplicity Commander",
    "win32/Simplicity Commander",
    "linux_x86_64/commander",
    "Commander.app/Contents/MacOS",
    "Commander.app/Contents/Frameworks",
    "macosx/Commander.app/Contents/MacOS",
    "macosx/Commander.app/Contents/Frameworks"
  ],
  "featureLevel": 11,
  "requiredFeatureLevel": "apack.core:4",
  "hwdb.boardid": "method.getPartNumber + method.getVariant",
  "hwdb.boardrev": "method.getRevision",
  "hwdb.partid": "id",
  "apack.adapterLabel": "adapterLabel + \" (\" + serialNumber + \")\"",
  "apack.boardid": "\"BRD\" + boardId",
  "apack.boardrev": "boardRevision",
  "apack.partid": "mcuName",
  "inspector.usbVid": "0x1366",
  "inspector.delay": "3000",


  "option" : {
    "log": {
      "name" : "Enable log",
      "description" : "Turns on the complete logging of traffic into a silink_<PID>.log file.",
      "type" : "boolean",
      "default" : "false"
    },

    "pollDelay" : {
      "name" : "EMUCOM Polling Delay (uSec)",
      "description" : "Sets the polling delay in microseconds, for how regularly the EMUCOM port is polled for data.",
      "type" : "integer",
      "default" : "5000"
    }
  },

  "export": {
    "win32.x86_64": {
      "lib(libjlinkarm)": "JLink_x64.dll"
    },
    "linux.aarch64": {
      "lib(libjlinkarm)": "libjlinkarm.so"
    },
    "linux.x86_64": {
      "lib(libjlinkarm)": "libjlinkarm.so"
    },
    "macosx.aarch64": {
      "lib(libjlinkarm)": "Commander.app/Contents/Frameworks/libjlinkarm.dylib"
    },
    "macosx.x86_64": {
      "lib(libjlinkarm)": "Commander.app/Contents/Frameworks/libjlinkarm.dylib"
    }
  },

  "executable": {
    "commander:linux.x86_64": {
      "exe": "commander",
      "lib": [
        "libemdll.so",
        "libjlinkarm.so"
      ]
    },
    "commander:linux.x86": {
      "exe": "commander",
      "lib": [
        "libemdll.so",
        "libjlinkarm.so"
      ]
    },
    "commander:linux.aarch64": {
      "exe": "commander",
      "lib": [
        "libemdll.so",
        "libjlinkarm.so"
      ]
    },
    "commander:win32.x86": {
      "exe": "commander.exe",
      "lib": [
        "emdll0.dll",
        "JLinkARM.dll"
      ]
    },
    "commander:win32.x86_64": {
      "exe": "commander.exe",
      "lib": [
        "emdll0.dll",
        "JLink_x64.dll"
      ]
    },
    "commander:macosx.x86_64": {
      "exe": "commander",
      "lib": [
        "libemdll.dylib",
        "libjlinkarm.dylib"
      ]
    },
    "commander:macosx.aarch64": {
      "exe": "commander",
      "lib": [
        "libemdll.dylib",
        "libjlinkarm.dylib"
      ]
    },

    "silink:linux.x86_64": {
      "exe": "silink"
    },

    "silink:linux.aarch64": {
      "exe": "silink",
      "lib": [
        "libjlinkarm.so",
        "libemdll.so",
        "libapack.so"
      ]
    },

    "silink:win32.x86": {
      "exe": "silink.exe",
      "lib": [
        "JLinkARM.dll",
        "emdll0.dll",
        "libapack.dll"
      ]
    },

    "silink:win32.x86_64": {
      "exe": "silink.exe",
      "lib": [
        "JLink_x64.dll",
        "emdll0.dll",
        "libapack64.dll"
      ]
    },

    "silink:macosx.x86_64": {
      "exe": "silink",
      "lib": [
        "libjlinkarm.dylib",
        "libemdll.dylib",
        "libapack.dylib"
      ]
    },

    "silink:macosx.aarch64": {
      "exe": "silink",
      "lib": [
        "libjlinkarm.dylib",
        "libemdll.dylib",
        "libapack.dylib"
      ]
    }
  },

  "ui": {
    "launchItem:mcu.arm.e.*32.*,mcu.8051.efm8.*,mcu.arm.wfm.si917.*": {
      "category": "tools",
      "icon": "commander40x40.png",
      "label": "Simplicity Commander",
      "function": "launchCommander",
      "toolTip": "Graphical and command-line utility to manage flash and security of EFM and EFR devices in development and production environments"
    }
  },
  "function": {
    "help": {
      "cmd": "$(commander) --help"
    },
    "setDebugMode": {
      "cmd": "$(commander) --apack adapter dbgmode ${mode} ( --serialno ${sn} | --ip ${addr} )"
    },
    "getDebugMode": {
      "cmd": "$(commander) --apack adapter dbgmode ( --serialno ${sn} | --ip ${addr} )"
    },
    "inspect": {
      "cmd": "$(commander) adapter list [ ${json?:--json} ]"
    },
    "writeFirmware": {
      "cmd": "$(commander) --apack adapter fwupgrade ( --serialno ${sn} | --ip ${addr} ) ${file}"
    },
    "wstkSimpleApplicationUpload": {
      "cmd": "$(commander) --apack flash ( --serialno ${sn} | --ip ${addr} ) [ -d ${part} ] ${file}"
    },
    "wstkApplicationUpload": {
      "cmd": "$(commander) --apack ${external?extflash:flash} ${external?write:} ( --serialno ${sn} | --ip ${addr} ) [ --tif ${tif} ] [ --address ${start} ] [ ${run?:--halt} ] [ ${erasemode==full?--masserase:} ] [ --speed ${jlinkspeedkhz} ] [ -d ${part} ] [ --tokengroup znet --tokenfile ${encryptionKey} ] [ --tokenfile ${signingKey} ] ${file} [ ${bootImage} ]"
    },
    "launchCommander": {
      "cmd": "$(commander)"
    },
    "detectPart": {
      "cmd": "$(commander) --apack device info -d ${device} ( --serialno ${sn} | --ip ${addr} ) --tif ${tif}"
    },
    "readNvm3Firmware": {
      "cmd": "$(commander) nvm3 read [ -d ${part} ] ( --serialno ${sn} | --ip ${addr} ) --outfile ${outfile}"
    },
    "parseNvm3FileDump": {
      "cmd": "$(commander) nvm3 parse ${input} --key ${key}"
    },
    "pageErase": {
      "cmd": "$(commander) device pageerase [ -d ${part} ] ( --serialno ${sn} | --ip ${addr} ) ( --region ${region} | --range ${range} )"
    },
    "adapterProbe": {
      "cmd": "$(commander) adapter probe ( --serialno ${sn} | --ip ${addr} ) [ ${json?:--json} ]"
    },
    "securityStatus": {
      "cmd": "$(commander) security status ( --serialno ${sn} | --ip ${addr} ) [ ${json?:--json} ]"
    },

    "silink": {
      "cmd": "$(silink) -appdata [ -sn ${sn} | -ip ${addr} ] -map ${maplist} -trace=${option:log} -polldelay=${option:pollDelay}",
      "terminate": "quit"
    },
    "silink-automap": {
      "cmd": "$(silink) [ -sn ${sn} | -ip ${addr} ] -automap ${baseport} -trace=${option:log} -polldelay=${option:pollDelay}",
      "terminate": "quit"
    }

    
  }
}
